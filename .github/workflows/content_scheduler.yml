# .github/workflows/content_scheduler.yml
name: Generador de Contenido Semanal

on:
  schedule:
    - cron: '0 12 * * 5' # Cada viernes a las 12:00 PM
  workflow_dispatch: # Permite la ejecuci√≥n manual
    inputs:
      google_api_key:
        description: 'Clave de API de Google para la generaci√≥n de contenido'
        required: true
        default: 'Pega tu clave de API aqu√≠'


jobs:
  generate-content:
    runs-on: ubuntu-latest
    permissions:
      # Se necesitan permisos de escritura para hacer commit del nuevo art√≠culo.
      contents: write

    steps:
      - name: Checkout del Repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar Dependencias de Python
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: üêû Depurar Secretos de Reddit
        run: |
          echo "Verificando la presencia de los secretos de Reddit..."
          if [ -n "${{ secrets.REDDIT_CLIENT_ID }}" ]; then echo "‚úÖ REDDIT_CLIENT_ID encontrado."; else echo "‚ùå ERROR: REDDIT_CLIENT_ID no encontrado o vac√≠o."; fi
          if [ -n "${{ secrets.REDDIT_CLIENT_SECRET }}" ]; then echo "‚úÖ REDDIT_CLIENT_SECRET encontrado."; else echo "‚ùå ERROR: REDDIT_CLIENT_SECRET no encontrado o vac√≠o."; fi
          if [-n "${{ secrets.REDDIT_USERNAME }}" ]; then echo "‚úÖ REDDIT_USERNAME encontrado."; else echo "‚ùå ERROR: REDDIT_USERNAME no encontrado o vac√≠o."; fi
          if [ -n "${{ secrets.REDDIT_PASSWORD }}" ]; then echo "‚úÖ REDDIT_PASSWORD encontrado."; else echo "‚ùå ERROR: REDDIT_PASSWORD no encontrado o vac√≠o."; fi
          echo "--------------------------------------------------"
        # Este paso no necesita la secci√≥n `env`, ya que accede a los secretos directamente.

      - name: Ejecutar la App de Contenido
        id: generate
        run: |
          python scripts/automation_app.py
        env:
          GOOGLE_API_KEY: ${{ github.event.inputs.google_api_key }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}

      - name: Verificar si hay cambios
        id: git-check
        # Primero, a√±adimos cualquier archivo .md nuevo en la carpeta posts.
        # Luego, `git diff` puede detectar si hay cambios preparados para el commit.
        run: |
          git add posts/*.md
          echo "changes=$(if git diff --staged --quiet --exit-code; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT

      - name: Commit y Push del Nuevo Art√≠culo
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@users.noreply.github.com'
          # Busca el archivo .md m√°s reciente para el mensaje del commit
          LATEST_POST=$(ls -t posts/*.md | head -n 1)
          COMMIT_MESSAGE="feat(content): Add new article from bot: $(basename $LATEST_POST .md)"
          git commit -m "$COMMIT_MESSAGE"
          git push